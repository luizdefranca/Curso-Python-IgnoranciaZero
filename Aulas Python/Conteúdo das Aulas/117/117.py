##### Sets #####

print("Sets são como listas, só que não possuem elementos repetidos")
print("Para construir um set precisamos passar um objeto iterável")
print("Por exemplo se criarmos set('mississippi') teremos: ")
print(set('mississippi'))
input()

print("Note que a palavra set num editor de texto para python")
print("possuí a palavra set com uma cor diferente o que significa")
print("que se trata de um objeto pré-definido assim como list, range ...")
input()

print("Podemos criar um set também utilizando a sintaxe")
print("dos {}, por exemplo")
print({1,2,3,4,5})
print({1,2,3,4,5,5})
input()

print("Podemos utilizar algumas operações comuns a outros")
print("objetos iteráveis como: ")
print("len(s)")
print("x in s")
print("x not in s")
print("{x%2 for x in range(10)} --> Set comprehension")
print("s.copy()")
input()

print("E qual a vantagem de um set?")
input()

print("1 - A unicidade")
print("Podemos adicionar elementos a um set pelo método 'add'")
print("entretanto, quando adicionamos um novo elemento se esse")
print("elemento já estiver dentro do set o esse permanecera")
print("inalterado, por exemplo:")
s = set((1,2,3,4,5))
print("Set =", s)
s.add(6)
print("Set + 6 =", s)
s.add(6)
print("Set + 6 de novo =", s)
input()

print("2 - Dinamicidade")
print("Podemos adicionar ou remover elementos a partir")
print("de alguns métodos:")
print("add = Adiciona um novo elemento ao set")
s.add(7)
print(s)
print("update = Adiciona um set a outro")
s.update([8,9,10])
print(s)
print("remove = Remove um elemento, senão dá um erro")
s.remove(9)
print(s)
try:
    s.remove(9)
except Exception as E:
    print(E)
print("discard = Remove um elemento, mas não levanta erro")
s.discard(8)
s.discard(8)
print(s)
print("pop = Remove e retorna um elemento aleatório do set")
print(s.pop())
print(s)
print("clear = Remove todos os elementos do set")
s.clear()
print(s)
input()

print("3 - A intersecção")
print("Criemos dois sets, serão duas listas de pessoas")
print("que irão para um determindado evento A e B.")
print("Podemos obter as pessoas que vão tanto para o")
print("evento A quanto B utilizando o método 'intersection'")
a = set(["Lucas", "João", "Henrique"])
b = set(["João", "Julia"])
print(b.intersection(a))
print(a.intersection(b))
print("Podemos usar também o operador '&'")
print(a & b)
input()

print("4 - A diferença")
print("Podemos obter as pessoas que participarão de um dado evento")
print("e não irão ao outro podemos utilizar o método 'difference'")
print(b.difference(a))
print(a.difference(b))
print("Podemos usar também o operador '-'")
print(a - b)
input()

print("5 - Diferença Simétrica")
print("Permite obter todos os elementos únicos em cada set")
print("Obter, por exemplo, as pessoas que participarão de")
print("apenas um evento")
print(b.symmetric_difference(a))
print(a.symmetric_difference(b))
print("Podemos usar também o operador '^'")
print(a ^ b)
input()

print("6 - A união")
print("Podemos obter a junção de dois conjuntos, sem")
print("repetições pelo método union, por exemplo, obter")
print("todos os participantes de ambos eventos")
print(a.union(b))
print("Podemos usar o operador '|' para realizar a mesma operação")
print(a | b)
input()

print("7 - Sub/Super set")
print("Podemos identificar se um set está contido em outro")
print("ou se um set contem outro utilizando os métodos")
print("'issubset' e 'issuperset'")
s1 = {1,2,3}
s2 = {1,2,3,4,5}
print("s1 < s2 =", s1.issubset(s2))
print("s2 < s1 =", s2.issubset(s1))
print("s1 > s2 =", s1.issuperset(s2))
print("s2 > s1 =", s2.issuperset(s1))
input()
